//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MusicManager {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MMHistory")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MMHistory : System.Data.DataSet {
        
        private MusicDataTable tableMusic;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MMHistory() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MMHistory(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Music"] != null)) {
                    base.Tables.Add(new MusicDataTable(ds.Tables["Music"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MusicDataTable Music {
            get {
                return this.tableMusic;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MMHistory cln = ((MMHistory)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Music"] != null)) {
                    base.Tables.Add(new MusicDataTable(ds.Tables["Music"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMusic = ((MusicDataTable)(base.Tables["Music"]));
            if ((initTable == true)) {
                if ((this.tableMusic != null)) {
                    this.tableMusic.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MMHistory";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MMHistory.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMusic = new MusicDataTable();
            base.Tables.Add(this.tableMusic);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMusic() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MMHistory ds = new MMHistory();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void MusicRowChangeEventHandler(object sender, MusicRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MusicDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnFullFilename;
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnArtist;
            
            private System.Data.DataColumn columnAlbum;
            
            private System.Data.DataColumn columnGenre;
            
            private System.Data.DataColumn columnTime;
            
            private System.Data.DataColumn columnTrack;
            
            private System.Data.DataColumn columnSize;
            
            private System.Data.DataColumn columnPlayCount;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnCumulativeProbability;
            
            private System.Data.DataColumn columnMMProbability;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MusicDataTable() {
                this.TableName = "Music";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MusicDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MusicDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullFilenameColumn {
                get {
                    return this.columnFullFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistColumn {
                get {
                    return this.columnArtist;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AlbumColumn {
                get {
                    return this.columnAlbum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreColumn {
                get {
                    return this.columnGenre;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrackColumn {
                get {
                    return this.columnTrack;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayCountColumn {
                get {
                    return this.columnPlayCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CumulativeProbabilityColumn {
                get {
                    return this.columnCumulativeProbability;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MMProbabilityColumn {
                get {
                    return this.columnMMProbability;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MusicRow this[int index] {
                get {
                    return ((MusicRow)(this.Rows[index]));
                }
            }
            
            public event MusicRowChangeEventHandler MusicRowChanging;
            
            public event MusicRowChangeEventHandler MusicRowChanged;
            
            public event MusicRowChangeEventHandler MusicRowDeleting;
            
            public event MusicRowChangeEventHandler MusicRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMusicRow(MusicRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MusicRow AddMusicRow(string FullFilename, string Filename, string Title, string Artist, string Album, string Genre, string Time, int Track, int Size, int PlayCount, string Status, double CumulativeProbability, double MMProbability) {
                MusicRow rowMusicRow = ((MusicRow)(this.NewRow()));
                rowMusicRow.ItemArray = new object[] {
                        null,
                        FullFilename,
                        Filename,
                        Title,
                        Artist,
                        Album,
                        Genre,
                        Time,
                        Track,
                        Size,
                        PlayCount,
                        Status,
                        CumulativeProbability,
                        MMProbability};
                this.Rows.Add(rowMusicRow);
                return rowMusicRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MusicDataTable cln = ((MusicDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MusicDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnFullFilename = base.Columns["FullFilename"];
                this.columnFilename = base.Columns["Filename"];
                this.columnTitle = base.Columns["Title"];
                this.columnArtist = base.Columns["Artist"];
                this.columnAlbum = base.Columns["Album"];
                this.columnGenre = base.Columns["Genre"];
                this.columnTime = base.Columns["Time"];
                this.columnTrack = base.Columns["Track"];
                this.columnSize = base.Columns["Size"];
                this.columnPlayCount = base.Columns["PlayCount"];
                this.columnStatus = base.Columns["Status"];
                this.columnCumulativeProbability = base.Columns["CumulativeProbability"];
                this.columnMMProbability = base.Columns["MMProbability"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnFullFilename = new System.Data.DataColumn("FullFilename", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullFilename);
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilename);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnArtist = new System.Data.DataColumn("Artist", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtist);
                this.columnAlbum = new System.Data.DataColumn("Album", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlbum);
                this.columnGenre = new System.Data.DataColumn("Genre", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenre);
                this.columnTime = new System.Data.DataColumn("Time", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnTrack = new System.Data.DataColumn("Track", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrack);
                this.columnSize = new System.Data.DataColumn("Size", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnPlayCount = new System.Data.DataColumn("PlayCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayCount);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnCumulativeProbability = new System.Data.DataColumn("CumulativeProbability", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCumulativeProbability);
                this.columnMMProbability = new System.Data.DataColumn("MMProbability", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMMProbability);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, false));
                this.columnID.AutoIncrement = true;
                this.columnID.Unique = true;
                this.columnFullFilename.AllowDBNull = false;
                this.columnFilename.AllowDBNull = false;
                this.columnTitle.AllowDBNull = false;
                this.columnArtist.AllowDBNull = false;
                this.columnAlbum.AllowDBNull = false;
                this.columnGenre.AllowDBNull = false;
                this.columnTime.AllowDBNull = false;
                this.columnTrack.AllowDBNull = false;
                this.columnTrack.DefaultValue = ((int)(1));
                this.columnSize.AllowDBNull = false;
                this.columnSize.DefaultValue = ((int)(1));
                this.columnPlayCount.AllowDBNull = false;
                this.columnPlayCount.DefaultValue = ((int)(1));
                this.columnStatus.AllowDBNull = false;
                this.columnCumulativeProbability.AllowDBNull = false;
                this.columnCumulativeProbability.DefaultValue = ((double)(1));
                this.columnMMProbability.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MusicRow NewMusicRow() {
                return ((MusicRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MusicRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MusicRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MusicRowChanged != null)) {
                    this.MusicRowChanged(this, new MusicRowChangeEvent(((MusicRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MusicRowChanging != null)) {
                    this.MusicRowChanging(this, new MusicRowChangeEvent(((MusicRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MusicRowDeleted != null)) {
                    this.MusicRowDeleted(this, new MusicRowChangeEvent(((MusicRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MusicRowDeleting != null)) {
                    this.MusicRowDeleting(this, new MusicRowChangeEvent(((MusicRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMusicRow(MusicRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MMHistory ds = new MMHistory();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MusicDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MusicRow : System.Data.DataRow {
            
            private MusicDataTable tableMusic;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MusicRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMusic = ((MusicDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableMusic.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID\' in table \'Music\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMusic.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullFilename {
                get {
                    return ((string)(this[this.tableMusic.FullFilenameColumn]));
                }
                set {
                    this[this.tableMusic.FullFilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    return ((string)(this[this.tableMusic.FilenameColumn]));
                }
                set {
                    this[this.tableMusic.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableMusic.TitleColumn]));
                }
                set {
                    this[this.tableMusic.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Artist {
                get {
                    return ((string)(this[this.tableMusic.ArtistColumn]));
                }
                set {
                    this[this.tableMusic.ArtistColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Album {
                get {
                    return ((string)(this[this.tableMusic.AlbumColumn]));
                }
                set {
                    this[this.tableMusic.AlbumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Genre {
                get {
                    return ((string)(this[this.tableMusic.GenreColumn]));
                }
                set {
                    this[this.tableMusic.GenreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Time {
                get {
                    return ((string)(this[this.tableMusic.TimeColumn]));
                }
                set {
                    this[this.tableMusic.TimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Track {
                get {
                    return ((int)(this[this.tableMusic.TrackColumn]));
                }
                set {
                    this[this.tableMusic.TrackColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Size {
                get {
                    return ((int)(this[this.tableMusic.SizeColumn]));
                }
                set {
                    this[this.tableMusic.SizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PlayCount {
                get {
                    return ((int)(this[this.tableMusic.PlayCountColumn]));
                }
                set {
                    this[this.tableMusic.PlayCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableMusic.StatusColumn]));
                }
                set {
                    this[this.tableMusic.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CumulativeProbability {
                get {
                    return ((double)(this[this.tableMusic.CumulativeProbabilityColumn]));
                }
                set {
                    this[this.tableMusic.CumulativeProbabilityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MMProbability {
                get {
                    return ((double)(this[this.tableMusic.MMProbabilityColumn]));
                }
                set {
                    this[this.tableMusic.MMProbabilityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableMusic.IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableMusic.IDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MusicRowChangeEvent : System.EventArgs {
            
            private MusicRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MusicRowChangeEvent(MusicRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MusicRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591